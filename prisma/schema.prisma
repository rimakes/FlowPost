// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb" // Specify the database adapter, in this case, MongoDB
    url      = env("MONGO_URL")
}

model User {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    // name type decorator defaultauto map-to-mongo-_id ??
    name  String?
    email String? @unique
    image String?

    stripeCustomerId   String? //TODO:  should I add @unique @map(name:"stripe_customer_id")
    stripeSubscription Subscription?
    emailVerified      DateTime?
    hashedPassword     String?
    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt
    role               UserRole      @default(USER)

    settingsId    String         @unique @db.ObjectId
    settings      Settings       @relation(fields: [settingsId], references: [id])
    account       Account[]
    posts         BlogPost[]
    linkedinPosts LinkedinPost[]
    carousels     Carousel[]
    ideas         Idea[]
    brands        Brand[]
}

enum SubscriptionStatus {
    UNPAID
    PAID
}

type Subscription {
    priceId          String?
    // status           SubscriptionStatus
    productId        String? //TODO:  ...
    subscriptionId   String?
    currentPeriodEnd DateTime?
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String // REVIEW:  what is the db.String decorator for?
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    // RELATIONS
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId]) // the combination of provider and providerAccountId must be unique
}

model VerificationToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    ADMIN
    USER
}

model Settings {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // RELATIONS

    // Settings fields
    darkMode   Boolean     @default(false)
    iaSettings IaSettings?
    schedule   TimeSlot[]
    user       User?
}

type IaSettings {
    autoPostGeneration Boolean @default(false)
    shortBio           String
    topics             String // EJ. ["marketing", "technology", "business", "other"]
    other              String
}

type TimeSlot {
    dayOfTheWeek Int
    time         String // EJ. "10:00", "14:00", "18:15", "20:00...
}

model Brand {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // RELATIONS
    authorId String @db.ObjectId
    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

    // Brand fields
    name         String
    handle       String
    imageUrl     String
    colorPalette ColorPalette
    fontPalette  FontPalette
}

model Idea {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // RELATIONS
    authorId String @db.ObjectId
    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

    // Idea fields
    title       String?
    description String
    published   Boolean   @default(false)
    publishedAt DateTime?
}

// Model posts
model BlogPost {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // RELATIONS
    authorId String @db.ObjectId
    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

    // BlogPost fields
    title       String
    content     String
    published   Boolean   @default(false)
    publishedAt DateTime?
}

model LinkedinPost {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    content     String
    published   Boolean   @default(false)
    publishedAt DateTime?

    // RELATIONS
    author        Author
    scheduledPost ScheduledPost[] // One-to-many relation: One LinkedIn post can be part of multiple scheduled posts
    User          User?           @relation(fields: [userId], references: [id])
    userId        String?         @db.ObjectId

    carousel Carousel[] //REVIEW: Prisma does not support nullable unique (as should be the linkedinPostId in the Carousel model to make a 1-to-1 relationship), so we are using 1-to-m for now
}

type DisplayableText {
    // Embedded type -> It does not have its own collection
    content String  @default("")
    isShown Boolean @default(true)
}

type Slide {
    title           DisplayableText?
    tagline         DisplayableText?
    paragraphs      DisplayableText[]
    slideHeading    DisplayableText?
    settings        SlideOverrides?
    bigCharacter    DisplayableText?
    listFirstItem   Int?
    image           Image?
    backgroundImage Image?
    design          String?
}

type Image {
    url      String
    alt      String
    caption  String?
    opacity  Float    @default(1)
    position Position @default(TOP)
}

enum Position {
    CENTER
    TOP
    BOTTOM
    LEFT
    RIGHT
    TOP_LEFT
    TOP_RIGHT
    BOTTOM_LEFT
    BOTTOM_RIGHT
}

type SlideOverrides {
    colorPalette ColorPalette?
    fontPalette  FontPalette?
}

type ColorPalette {
    font       String @default("#000000")
    background String @default("#ffffff")
    primary    String @default("#ff0000")
    accent     String @default("#ff0000")
}

type FontPalette {
    primary     String @default("bricolage")
    secondary   String @default("bricolage")
    handWriting String @default("bricolage")
}

model Carousel {
    id               String           @id @default(auto()) @map("_id") @db.ObjectId
    slides           Slide[]
    pdfUrl           String?
    publicId         String?
    thumbnailDataUrl String?
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    title            String?
    // Author is an embedded type. We are not using brand, because the user may want to create a carousel that is not related to a brand he/she has created previously (aka, he may want to create a one-off carousel)
    author           Author
    swipeLabel       String           @default("Desliza")
    settings         CarouselSettings
    User             User?            @relation(fields: [userId], references: [id])
    userId           String?          @db.ObjectId
    linkedinPost     LinkedinPost?    @relation(fields: [linkedinPostId], references: [id])
    linkedinPostId   String?          @db.ObjectId
}

type CarouselSettings {
    // default "Desliza"
    colorPalette      ColorPalette
    fontPalette       FontPalette
    // TODO: change to decorationId
    backgroundPattern String       @default("none")

    showSwipeLabel        Boolean     @default(true)
    alternateColors       Boolean     @default(false)
    showCounter           Boolean     @default(true)
    showAuthor            Boolean     @default(true)
    showDecoration        Boolean     @default(true)
    aspectRatio           AspectRatio @default(SQUARE)
    labelRoundness        Float       @default(0.5)
    showProfilePic        Boolean     @default(true)
    showName              Boolean     @default(true)
    showHandle            Boolean     @default(true)
    showAuthorInFirstOnly Boolean     @default(true)
}

type Author {
    name       String @default("Ricardo Sala")
    pictureUrl String @default("/public/images/placeholders/user.png")
    handle     String @default("@ricsala86")
}

enum AspectRatio {
    SQUARE
    PORTRAIT
}

// This model is used to store the post templates: basic structure that will be used to create linkedin posts
model PostTemplate {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // BlogPost fields
    name    String
    content String
    tags    String[]
}

// TODO: This model is not being used. It was created to store the categories of the posts. Should we use tags, categories or both?
model PostCategory {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Category fields
    name        String
    description String
    tags        String[]
}

//model to store the ScheduledPost
model ScheduledPost {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    time           String
    date           DateTime
    userId         String        @db.ObjectId
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    linkedinPostId String?       @db.ObjectId
    linkedinPost   LinkedinPost? @relation(fields: [linkedinPostId], references: [id])
}
